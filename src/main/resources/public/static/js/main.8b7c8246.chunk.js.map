{"version":3,"sources":["helperFunctions/helper.js","components/ScoreBar.js","components/CityDetailCard.js","components/CitySmallCard.js","components/PreferenceSlider.js","helperFunctions/PreferenceDescriptions.js","pages/CityListPage.js","pages/LandingPage.js","pages/CityPage.js","App.js","reportWebVitals.js","index.js"],"names":["separateCamelCaseWord","word","newWords","ch","toUpperCase","substring","ScoreBar","preference","score","colors","businessFreedom","commute","costOfLiving","economy","education","environmentalQuality","healthcare","housing","internetAccess","leisureCulture","outdoors","safety","startups","taxation","tolerance","travelConnectivity","ventureCapital","className","style","background","color","CityDetailCard","city","sortedPreferences","uaName","uaCountry","map","element","Math","round","CitySmallCard","index","useState","displayMore","setDisplayMore","viewCount","setViewCount","toggleDisplay","useCallback","toggleViewCount","cityNameCountry","onClick","display","slice","PreferenceSlider","value","name","step","min","max","linearGradientColor","rangeBackgroundColor","sliderThumbColor","onChange","descriptions","classes","createUseStyles","preferenceSlider","backgroundColor","boxShadow","preferenceSliderValue","borderRight","useStyles","preferenceRef","useRef","valueRef","useEffect","val","newBackgroundStyle","current","rangeLinearGradient","top","onScroll","e","console","log","target","ref","type","CityListPage","defaultPreferences","userPreferences","useLocation","state","preferences","setPreferences","preferredCities","setPreferredCities","filters","setFilters","filteredCities","setFilteredCities","cityLoadError","setCityLoadError","displayCount","setDisplayCount","sliderModalRef","filterModalRef","fetchCities","a","fetch","process","response","json","data","sort","b","sortCitiesByPreferences","changeDisplayCount","increment","maxCount","length","minDisplayCount","onChangeSlider","pref","parseFloat","onChangeFilter","filter","newFilters","toggledValue","toggledFilters","Object","entries","key","push","newFilteredCities","includes","uaContinent","sorted","keys","newSorted","sliderProps","useMemo","cardProps","v","filterName","id","checked","htmlFor","indexOf","cities","newPreferredCities","i","newScore","err","LandingPage","preferenceValues","setPreferenceValues","to","pathname","CityPage","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b7c8246.chunk.js","sourcesContent":["export const separateCamelCaseWord = (word) => {\r\n    var newWords = '';\r\n    for (let ch of word) {\r\n        if (ch === ch.toUpperCase()) {\r\n            newWords += ' ';\r\n        }\r\n        newWords += ch;\r\n    }\r\n    newWords[0].toUpperCase();\r\n    return newWords[0].toUpperCase() + newWords.substring(1);\r\n}","import { React } from 'react';\r\nimport { separateCamelCaseWord } from '../helperFunctions/helper';\r\n\r\n\r\nexport const ScoreBar = ({preference, score}) => {\r\n    const colors = {\r\n        businessFreedom: \"#19ad51\",\r\n        commute: \"#36cc24\",\r\n        costOfLiving: \"#f3d630\",\r\n        economy: \"#5c14a1\",\r\n        education: \"#150e78\",\r\n        environmentalQuality: \"#3d14a4\",\r\n        healthcare: \"#051fa5\",\r\n        housing: \"#f3c32c\",\r\n        internetAccess: \"#b9117d\",\r\n        leisureCulture: \"#d10d54\",\r\n        outdoors: \"#f1351b\",\r\n        safety: \"#0d6999\",\r\n        startups: \"#f4eb33\",\r\n        taxation: \"#88149f\",\r\n        tolerance: \"#e70c26\",\r\n        travelConnectivity: \"#7adc29\",\r\n        ventureCapital: \"#d2ed31\"\r\n    };\r\n    // environmental quality: 6.34/10  30 - 14\r\n    // commute: 6/10\r\n    // const stringLength = separateCamelCaseWord(preference).length + score.toString().length + 2;\r\n    // const padding = 30 - stringLength;\r\n    // var paddedString = separateCamelCaseWord(preference) + ': ' + score.toString().padStart(padding, '!') + '/10';\r\n    // console.log(preference + ': ' + score.toString());\r\n    // console.log(paddedString);\r\n    \r\n    return(\r\n        <div key={preference} className=\"preference-row\" >\r\n            <div\r\n                className=\"card-preference\"\r\n                key={preference}\r\n                >\r\n                {separateCamelCaseWord(preference)}\r\n            </div>\r\n            <div \r\n                key={score} \r\n                className=\"score-bar\" \r\n                style={{\r\n                    background: `linear-gradient(to right, ${colors[preference]} ${score*10}%, #eee ${score}% ${100 - score*10}%)`,\r\n                    color: colors[preference]}}\r\n                    >\r\n                    .\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import { React } from 'react';\r\nimport { ScoreBar } from './ScoreBar';\r\n\r\nexport const CityDetailCard = ({city, sortedPreferences}) => {\r\n\r\n    if (city === null) {\r\n        return (\r\n            <div className=\"city-detail-card\">\r\n                <h3>Your Top City</h3>\r\n                <p></p>\r\n                <h4>Loading...</h4>\r\n            </div>\r\n            )\r\n    }\r\n    \r\n    return (\r\n        <div className=\"city-detail-card\">\r\n            <h3>Your Top City: {city.uaName + ', ' + city.uaCountry}</h3>\r\n            {sortedPreferences.map(element => \r\n            <ScoreBar key={element['pref']} preference={element['pref']} score={Math.round(city[element['pref']]*100)/100} />\r\n            )}\r\n\r\n            {/* <h5>Business Freedom {city ? Math.round(city['businessFreedom']*100)/100 : 'loading...'}</h5>\r\n            <h5>Education {city ? Math.round(city['education']*100)/100 : 'loading...'}</h5>\r\n            <h5>Housing {city ? Math.round(city['housing']*100)/100 : 'loading...'}</h5> */}\r\n            <br/>\r\n        </div>\r\n    )\r\n}","import { React, useState, useCallback } from 'react';\r\nimport { ScoreBar } from './ScoreBar';\r\n\r\nexport const CitySmallCard = ({city, index, sortedPreferences}) => {\r\n    const [displayMore, setDisplayMore] = useState(false);\r\n    const [viewCount, setViewCount] = useState(3);\r\n\r\n    const toggleDisplay = useCallback(() => {\r\n        setDisplayMore(!displayMore);\r\n    },[displayMore]);\r\n\r\n    const toggleViewCount = useCallback(() =>  {\r\n        setViewCount(viewCount === 3 ? 17: 3);\r\n    },[viewCount]);\r\n    \r\n    if (city === null) {\r\n        return (\r\n            <div className=\"city-small-card\">\r\n                <p>loading...</p>\r\n            </div>\r\n            )\r\n        }\r\n    \r\n\r\n    const cityNameCountry = city.uaName + ', ' + city.uaCountry;\r\n\r\n    return (\r\n        <div className=\"city-small-card\">\r\n            <div className=\"small-card-title\">\r\n                <span>{index}. {cityNameCountry}</span>\r\n                <span className=\"small-card-toggle\" onClick={() => toggleDisplay(false)}>{!displayMore ? 'show details' : 'hide details'}</span>\r\n            </div>\r\n            <div style={{display: displayMore ? 'block' : 'none'}}>\r\n                {sortedPreferences.slice(0, viewCount).map(element => \r\n                    <ScoreBar key={element['pref']} preference={element['pref']} score={Math.round(city[element['pref']]*100)/100}/>\r\n                    )\r\n                }\r\n                <p className=\"see-more-button\" onClick={() => toggleViewCount()}>See More</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { React, useEffect, useRef } from 'react';\r\nimport { createUseStyles } from 'react-jss';\r\nimport { separateCamelCaseWord } from '../helperFunctions/helper';\r\nimport { preferenceDescriptions } from '../helperFunctions/PreferenceDescriptions';\r\nimport './PreferenceSlider.css';\r\n\r\nexport const PreferenceSlider = ({value, \r\n                                  name, \r\n                                  step, \r\n                                  min, \r\n                                  max,\r\n                                  linearGradientColor,\r\n                                  rangeBackgroundColor,\r\n                                  sliderThumbColor,\r\n                                  onChange}) => {\r\n\r\n    const descriptions = preferenceDescriptions();\r\n\r\n    const useStyles = createUseStyles({\r\n        preferenceSlider: {\r\n            '&::-webkit-slider-thumb': {\r\n                backgroundColor: () => sliderThumbColor,\r\n                boxShadow: () => `0 0 0 1px #d7dcdf, 0 0 0 3px ${sliderThumbColor}`\r\n            }\r\n        },\r\n        preferenceSliderValue: {\r\n            backgroundColor: () => sliderThumbColor,\r\n            '&:after': {\r\n                borderRight: () => `4px solid ${sliderThumbColor}`\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n\r\n    const classes = useStyles();\r\n    const preferenceRef = useRef();\r\n    const valueRef = useRef();\r\n\r\n    const handleScrollChange = e => {\r\n        console.log(\"Scrolled\");\r\n        console.log(e);\r\n        e.target.value += 0.01;\r\n        onChange(e, name);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const rangeLinearGradient= (val) => {\r\n            const newBackgroundStyle = `linear-gradient(90deg, ${linearGradientColor} 0% ${val*100 + '%'}, ${rangeBackgroundColor} ${val*100 + '%'} 100%)`;\r\n            preferenceRef.current.style.background = newBackgroundStyle;\r\n        }\r\n        const valueSpanPosition = (val) => {\r\n            valueRef.current.style.top = `${15 - val * 78}px`;\r\n        }\r\n        rangeLinearGradient(value);\r\n        valueSpanPosition(value);\r\n        // window.addEventListener('scroll', handleScrollChange);\r\n        // return () => {\r\n        //     window.removeEventListener('scroll', handleScrollChange);\r\n        // }\r\n    }, [value, linearGradientColor, rangeBackgroundColor])\r\n\r\n    const handleChange = e => {\r\n        onChange(e, name);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n    \r\n        <div className=\"slider-container\" onScroll={handleScrollChange}>\r\n            <h4 className=\"preference-text\">{separateCamelCaseWord(name)}\r\n                <span className=\"tooltip-text\">{descriptions[name]}</span>\r\n            </h4>\r\n            <input \r\n                ref={preferenceRef}\r\n                className={`preference-slider ${classes.preferenceSlider}`} \r\n                name={name} type=\"range\" \r\n                min={min} max={max} \r\n                value={value} \r\n                step={step} \r\n                onChange={handleChange} \r\n                \r\n            />\r\n            <span ref={valueRef} className={`preference-slider-value ${classes.preferenceSliderValue}`}>{value}</span>\r\n            <div className=\"range-min-max-values\">\r\n            </div>\r\n        </div>\r\n    )\r\n}","export const preferenceDescriptions = () => {\r\n    return {\r\n        businessFreedom: \"The ability to start, operate, and close a business that represents the overall burden of regulation as well as the efficiency of government in the regulatory process.\",\r\n        commute: \"Satisfaction with daily trips from home to work. Factors include traffic, roads, public transport infrastructure and more.\",\r\n        costOfLiving: \"Measure of the affordability, including the price of food, utilities, rent and various goods and services.\",\r\n        economy: \"The health of the economy, measured in terms GDP, employment and price stability.\",\r\n        education: \"Quality of education, including student outcomes, student to teacher ratio, school environment, student & teacher satisfaction.\",\r\n        environmentalQuality: \"Measure of the air quality, drinking water quality, urban greenery and general cleanliness of the city. \",\r\n        healthcare: \"Measure of the quality and price of healthcare as well as life expectancy.\",\r\n        housing: \"Measure of the cost of renting in the country.\",\r\n        internetAccess: \"Measure of the rate of internet access in the country as well as internet speed (download and upload).\",\r\n        leisureCulture: \"Measure of quality and accessiblity of various activities in the city, ranging from art galleries, cinema to concerts and sports.\",\r\n        outdoors: \"Measure of quality of outdoor activities, factors include water access, seaside acess, mountainous terrain, variable elevation.\",\r\n        safety: \"Measured by crime rate, robberies, homicides, gun deaths, gun ownership\",\r\n        startups: \"Measure by the number of startups, investors, startup events, and general startup climate.\",\r\n        taxation: \"Measure of the company tax rates, income tax, time required to file taxes.\",\r\n        tolerance: \"Measure of equality and discrimination towards minority groups, e.g. minority races and LGBT.\",\r\n        travelConnectivity: \"Measure of Airport quality and intercity connectivity by trains.\",\r\n        ventureCapital: \"Measure of the quanity of venture capital.\"\r\n    }\r\n\r\n}","import { React, useEffect, useState, useMemo, useCallback, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { CityDetailCard } from '../components/CityDetailCard';\r\nimport { CitySmallCard } from '../components/CitySmallCard';\r\nimport { PreferenceSlider } from '../components/PreferenceSlider';\r\nimport './CityListPage.css';\r\n\r\nexport const CityListPage = () => {\r\n\r\n    const defaultPreferences = {\r\n        businessFreedom: 0.5,\r\n        commute: 0.5,\r\n        costOfLiving: 0.5,\r\n        economy: 0.5,\r\n        education: 0.5,\r\n        environmentalQuality: 0.5,\r\n        healthcare: 0.5,\r\n        housing: 0.5,\r\n        internetAccess: 0.5,\r\n        leisureCulture: 0.5,\r\n        outdoors: 0.5,\r\n        safety: 0.5,\r\n        startups: 0.5,\r\n        taxation: 0.5,\r\n        tolerance: 0.5,\r\n        travelConnectivity: 0.5,\r\n        ventureCapital: 0.5\r\n    };\r\n\r\n    const userPreferences = useLocation();\r\n\r\n    const continentFilters = {\r\n        \"Asia\": false,\r\n        \"North America\": false,\r\n        \"South America\": false,\r\n        \"Africa\": false,\r\n        \"Europe\": false,\r\n        \"Oceania\": false\r\n    }\r\n    \r\n    const minDisplayCount = 6;\r\n    const [preferences, setPreferences] = useState(userPreferences.state ? userPreferences.state : defaultPreferences);\r\n    const [preferredCities, setPreferredCities] = useState([{}]);\r\n    const [filters, setFilters] = useState(continentFilters);\r\n    const [filteredCities, setFilteredCities] = useState([{}]);\r\n    const [cityLoadError, setCityLoadError] = useState();\r\n    const [displayCount, setDisplayCount] = useState(minDisplayCount);\r\n\r\n    const sliderModalRef = useRef();\r\n    const filterModalRef = useRef();\r\n\r\n    const openSliderModal = () => {\r\n        sliderModalRef.current.style.display = 'block'; \r\n    };\r\n\r\n    const closeSliderModal = () => {\r\n        sliderModalRef.current.style.display = 'none';\r\n    }\r\n\r\n    const openFilterModal = () => {\r\n        filterModalRef.current.style.display = 'block'; \r\n    };\r\n\r\n    const closeFilterModal = () => {\r\n        filterModalRef.current.style.display = 'none';\r\n    }\r\n    useEffect(() => {\r\n        const fetchCities = async () => {\r\n            try {\r\n                const response = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/city/`);\r\n                const data = await response.json();\r\n                data.sort((a, b) => a.score < b.score ? 1 : -1);\r\n                console.log(data);\r\n                setPreferredCities(sortCitiesByPreferences(data, preferences));\r\n                setFilteredCities(sortCitiesByPreferences(data, preferences));\r\n            } catch (err) {\r\n                setCityLoadError(err);\r\n            }\r\n        };\r\n        fetchCities();\r\n    }, [preferences]\r\n    );\r\n\r\n    const changeDisplayCount = useCallback((increment) => {\r\n        const maxCount = filteredCities.length;\r\n        const step = 12;\r\n        if (increment && displayCount <= maxCount - step) {\r\n            setDisplayCount(displayCount + step);\r\n        }\r\n        else if (increment && displayCount < maxCount) {\r\n            setDisplayCount(maxCount);\r\n        }\r\n        else if (!increment && displayCount >= minDisplayCount + step) {\r\n            setDisplayCount(displayCount - step);\r\n        }\r\n        else if(!increment && displayCount > minDisplayCount) {\r\n            setDisplayCount(minDisplayCount);\r\n        }\r\n    }, [displayCount, filteredCities.length]\r\n    );\r\n\r\n    const onChangeSlider = useCallback((e, pref) => {\r\n        setPreferences({ ...preferences, [pref]: parseFloat(e.target.value) });\r\n        setPreferredCities(sortCitiesByPreferences(preferredCities, preferences));\r\n        setFilteredCities(sortCitiesByPreferences(filteredCities, preferences));\r\n    }, [preferences, preferredCities, filteredCities]\r\n    );\r\n    \r\n    const onChangeFilter = useCallback((e, filter) => {\r\n        const newFilters = filters;\r\n        const toggledValue = filters[filter];\r\n        newFilters[filter] = !newFilters[filter];\r\n        setFilters({ ...filters, [filter]: !toggledValue });\r\n        const toggledFilters = [];\r\n        for (const [key, value] of Object.entries(newFilters)) {\r\n            if (value === true) toggledFilters.push(key);\r\n        }\r\n        if (toggledFilters.length > 0) {\r\n            const newFilteredCities = [];\r\n            for (const city of preferredCities) {\r\n                if (toggledFilters.includes(city.uaContinent)) newFilteredCities.push(city);\r\n            }\r\n            if (displayCount > newFilteredCities.length) setDisplayCount(newFilteredCities.length);\r\n            setFilteredCities(newFilteredCities);\r\n        }\r\n        else {\r\n            setFilteredCities(preferredCities);\r\n        }\r\n\r\n    }, [filters, preferredCities, displayCount]\r\n    );\r\n\r\n    const sortedPreferences = useCallback(() => {\r\n        var sorted = Object.keys(preferences);\r\n        sorted = sorted.sort((a, b) => preferences[a] > preferences[b] ? -1 : 1);\r\n        const newSorted = [];\r\n        for (let pref of sorted) {\r\n            newSorted.push({ pref: pref });\r\n        }\r\n        return newSorted;\r\n    }, [preferences]\r\n    );\r\n\r\n    const sliderProps = useMemo(() => ({\r\n            step: 0.01,\r\n            min: 0,\r\n            max: 1,\r\n            linearGradientColor: \"#0a71b1\",\r\n            rangeBackgroundColor: \"#d7dcdf\",\r\n            sliderThumbColor: \"#0a71b1\",\r\n            onChange: (e, pref) => onChangeSlider(e, pref),\r\n        }), [onChangeSlider]\r\n    );\r\n\r\n    const cardProps = useMemo(() => ({\r\n            city: filteredCities[0],\r\n            sortedPreferences: sortedPreferences(),\r\n        }), [filteredCities, sortedPreferences]\r\n    )\r\n\r\n    // const cityModal = () => {\r\n    //     return (\r\n    //         <div className=\"slider-modal\">\r\n    //             <div className=\"modal-content\">\r\n    //                 <div className=\"modal-header\">\r\n    //                     <span className=\"close\" onClick={closeSliderModal}>&times;</span>\r\n    //                     <h2>Adjust Your Preferences</h2>\r\n    //                 </div>\r\n    //                 <div className=\"modal-body\">\r\n    //                     {Object.keys(defaultPreferences)\r\n    //                     .map(pref => <PreferenceSlider \r\n    //                         key={pref + '-slider'} \r\n    //                         value={preferences[pref]} \r\n    //                         name={pref} \r\n    //                         {...sliderProps} \r\n    //                         />)\r\n    //                     }\r\n    //                 </div>\r\n    //             </div>\r\n    //         </div>\r\n    // )\r\n    // }\r\n    if (preferredCities.length === 1) {\r\n        return (\r\n            <div className=\"city-list-page\">\r\n                <h1>{cityLoadError ? 'Could not load city data' : 'Loading...'}</h1>\r\n                {/* {Array(13).fill(Object.keys(preferences).map(pref => <button onclick={setPreference}>pref</button>))} */}\r\n                <CityDetailCard key=\"null-card\" city={null} />\r\n                {[1, 2, 3].map(v => <CitySmallCard key={v} city={null}/>)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"city-list-page\">\r\n            <div className=\"topbar\">\r\n                <h1 className=\"city-list-title\">Your Preferred Cities</h1>\r\n                <h4 className=\"modal-button\" onClick={openFilterModal}>Filter</h4>\r\n                <h4 className=\"modal-button\" onClick={openSliderModal}>Preferences</h4>\r\n            </div>\r\n            <div ref={sliderModalRef} className=\"slider-modal\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <span className=\"close\" onClick={closeSliderModal}>&times;</span>\r\n                        <h2>Adjust Your Preferences</h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        {Object.keys(defaultPreferences).map(pref => \r\n                        <PreferenceSlider \r\n                            key={pref + '-slider'} \r\n                            value={preferences[pref]} \r\n                            name={pref} \r\n                            {...sliderProps} \r\n                        />)\r\n                         }\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div ref={filterModalRef} className=\"filter-modal\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <span className=\"close\" onClick={closeFilterModal}>&times;</span>\r\n                        <h2>Filter By Continent</h2>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        {Object.keys(filters).map(filterName =>\r\n                            <div key={filterName} className=\"filter-checkbox-container\">\r\n                                <input \r\n                                    type=\"checkbox\" \r\n                                    id={`${filterName}-checkbox`} \r\n                                    name={filterName} \r\n                                    value={filterName}\r\n                                    checked={filters[filterName]}\r\n                                    onChange={(e) => onChangeFilter(e, filterName)}\r\n                                />\r\n                                <label htmlFor={`${filterName}-checkbox`}>{filterName}</label>\r\n                            </div>\r\n                            )\r\n                            }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <CityDetailCard \r\n                key=\"active-card\" \r\n                {...cardProps} \r\n            />\r\n\r\n            <div className=\"card-grid\">\r\n                {filteredCities.slice(1, displayCount)\r\n                .map(city => <CitySmallCard \r\n                                key={city.uaName + city.uaCountry} \r\n                                city={city}\r\n                                index={filteredCities.indexOf(city) + 1} \r\n                                sortedPreferences = {cardProps['sortedPreferences']}\r\n                            />\r\n                    )\r\n                }\r\n                <div className='show-container'>\r\n                    <span \r\n                        className=\"show-more\" \r\n                        onClick={() => changeDisplayCount(true)} \r\n                        style={{display: displayCount===filteredCities.length ? 'none' : 'inline'}}\r\n                        >\r\n                        Show More\r\n                    </span>\r\n                    <span \r\n                        className=\"show-less\" \r\n                        onClick={() => changeDisplayCount(false)} \r\n                        style={{display: displayCount===minDisplayCount ? 'none' : 'inline'}}\r\n                        >\r\n                        Show Less\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction sortCitiesByPreferences(cities, preferences) {\r\n    const newPreferredCities = cities;\r\n    for (let i = 0; i < newPreferredCities.length; i++) {\r\n        var newScore = 0;\r\n        for (const key of Object.keys(preferences)) {\r\n            newScore += newPreferredCities[i][key] * preferences[key];\r\n        }\r\n        try {\r\n            newPreferredCities[i]['score'] = newScore / 17;\r\n        } catch (err) {\r\n            console.log(\"Key error, city has no property 'score'\");\r\n        }\r\n    }\r\n    newPreferredCities.sort((a, b) => a.score > b.score ? -1 : 1);\r\n    return newPreferredCities;\r\n};","import { React, useState, useMemo, useCallback} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { PreferenceSlider } from '../components/PreferenceSlider';\r\nimport './LandingPage.css';\r\nexport const LandingPage = () => {\r\n\r\n    \r\n    const defaultPreferences = {\r\n        businessFreedom: 0.5,\r\n        commute: 0.5,\r\n        costOfLiving: 0.5,\r\n        economy: 0.5,\r\n        education: 0.5,\r\n        environmentalQuality: 0.5,\r\n        healthcare: 0.5,\r\n        housing: 0.5,\r\n        internetAccess: 0.5,\r\n        leisureCulture: 0.5,\r\n        outdoors: 0.5,\r\n        safety: 0.5,\r\n        startups: 0.5,\r\n        taxation: 0.5,\r\n        tolerance: 0.5,\r\n        travelConnectivity: 0.5,\r\n        ventureCapital: 0.5\r\n    };\r\n    const [preferenceValues, setPreferenceValues] = useState(defaultPreferences);\r\n\r\n    const onChangeSlider = useCallback((e, pref) => {\r\n        setPreferenceValues({...preferenceValues, [pref]: parseFloat(e.target.value)});\r\n    },\r\n    [preferenceValues]);\r\n\r\n    const sliderProps = useMemo(\r\n        () => ({\r\n            step: 0.01,\r\n            min: 0,\r\n            max: 1,\r\n            linearGradientColor: \"#0a71b1\",\r\n            rangeBackgroundColor: \"#d7dcdf\",\r\n            sliderThumbColor: \"#0a71b1\",\r\n            onChange: (e, pref) => onChangeSlider(e, pref),\r\n        }),\r\n        [onChangeSlider]\r\n    );\r\n\r\n    return (\r\n        <div className=\"landing-page\">\r\n            <h2>Choose your city preferences</h2>\r\n            <div className=\"grid\">\r\n                {Object.keys(defaultPreferences).map(pref => \r\n                <PreferenceSlider \r\n                    key={pref + '-slider'} \r\n                    value={preferenceValues[pref]} \r\n                    name={pref} {...sliderProps} \r\n                />)\r\n                }\r\n            </div>\r\n            <Link \r\n                className=\"link-btn\"\r\n                to={{\r\n                    pathname: '/cityList',\r\n                    state: preferenceValues\r\n                }}\r\n            >\r\n            Discover My Cities\r\n            </Link>\r\n        </div>\r\n    );\r\n}","import { React } from 'react';\r\n\r\nexport const CityPage = () => {\r\n\r\n    return (\r\n        <div>\r\n            <h1>City Page</h1>\r\n        </div>\r\n    )\r\n}","import './AppBaseStyles.css'\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { CityListPage } from './pages/CityListPage';\nimport { LandingPage } from './pages/LandingPage';\nimport { CityPage } from './pages/CityPage';\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/cityList\">\n            <CityListPage />\n          </Route>\n        <Route path=\"/city/:cityName/Country/:countryName\">\n          <CityPage />\n        </Route>\n        <Route path=\"/\">\n          <LandingPage />  \n        </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}